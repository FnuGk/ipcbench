// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nested.proto

package ipcbench

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Nested_Type int32

const (
	Nested_THIS_TYPE     Nested_Type = 0
	Nested_THAT_TYPE     Nested_Type = 1
	Nested_ONE_MORE_TYPE Nested_Type = 3
)

var Nested_Type_name = map[int32]string{
	0: "THIS_TYPE",
	1: "THAT_TYPE",
	3: "ONE_MORE_TYPE",
}

var Nested_Type_value = map[string]int32{
	"THIS_TYPE":     0,
	"THAT_TYPE":     1,
	"ONE_MORE_TYPE": 3,
}

func (x Nested_Type) String() string {
	return proto.EnumName(Nested_Type_name, int32(x))
}

func (Nested_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a0036ddd0f0b972, []int{1, 0}
}

type Scalars struct {
	D                    float64  `protobuf:"fixed64,1,opt,name=d,proto3" json:"d,omitempty"`
	I                    int64    `protobuf:"varint,2,opt,name=i,proto3" json:"i,omitempty"`
	B                    bool     `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	S                    string   `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Scalars) Reset()         { *m = Scalars{} }
func (m *Scalars) String() string { return proto.CompactTextString(m) }
func (*Scalars) ProtoMessage()    {}
func (*Scalars) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a0036ddd0f0b972, []int{0}
}

func (m *Scalars) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scalars.Unmarshal(m, b)
}
func (m *Scalars) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scalars.Marshal(b, m, deterministic)
}
func (m *Scalars) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scalars.Merge(m, src)
}
func (m *Scalars) XXX_Size() int {
	return xxx_messageInfo_Scalars.Size(m)
}
func (m *Scalars) XXX_DiscardUnknown() {
	xxx_messageInfo_Scalars.DiscardUnknown(m)
}

var xxx_messageInfo_Scalars proto.InternalMessageInfo

func (m *Scalars) GetD() float64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *Scalars) GetI() int64 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *Scalars) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *Scalars) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type Nested struct {
	Id                   int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subtype              *Nested_SubType `protobuf:"bytes,3,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Scalars              []*Scalars      `protobuf:"bytes,4,rep,name=scalars,proto3" json:"scalars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Nested) Reset()         { *m = Nested{} }
func (m *Nested) String() string { return proto.CompactTextString(m) }
func (*Nested) ProtoMessage()    {}
func (*Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a0036ddd0f0b972, []int{1}
}

func (m *Nested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nested.Unmarshal(m, b)
}
func (m *Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nested.Marshal(b, m, deterministic)
}
func (m *Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nested.Merge(m, src)
}
func (m *Nested) XXX_Size() int {
	return xxx_messageInfo_Nested.Size(m)
}
func (m *Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_Nested proto.InternalMessageInfo

func (m *Nested) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Nested) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Nested) GetSubtype() *Nested_SubType {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (m *Nested) GetScalars() []*Scalars {
	if m != nil {
		return m.Scalars
	}
	return nil
}

type Nested_SubType struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 Nested_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ipcbench.Nested_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Nested_SubType) Reset()         { *m = Nested_SubType{} }
func (m *Nested_SubType) String() string { return proto.CompactTextString(m) }
func (*Nested_SubType) ProtoMessage()    {}
func (*Nested_SubType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a0036ddd0f0b972, []int{1, 0}
}

func (m *Nested_SubType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nested_SubType.Unmarshal(m, b)
}
func (m *Nested_SubType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nested_SubType.Marshal(b, m, deterministic)
}
func (m *Nested_SubType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nested_SubType.Merge(m, src)
}
func (m *Nested_SubType) XXX_Size() int {
	return xxx_messageInfo_Nested_SubType.Size(m)
}
func (m *Nested_SubType) XXX_DiscardUnknown() {
	xxx_messageInfo_Nested_SubType.DiscardUnknown(m)
}

var xxx_messageInfo_Nested_SubType proto.InternalMessageInfo

func (m *Nested_SubType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Nested_SubType) GetType() Nested_Type {
	if m != nil {
		return m.Type
	}
	return Nested_THIS_TYPE
}

type Top struct {
	Nested               []*Nested `protobuf:"bytes,1,rep,name=nested,proto3" json:"nested,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Top) Reset()         { *m = Top{} }
func (m *Top) String() string { return proto.CompactTextString(m) }
func (*Top) ProtoMessage()    {}
func (*Top) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a0036ddd0f0b972, []int{2}
}

func (m *Top) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Top.Unmarshal(m, b)
}
func (m *Top) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Top.Marshal(b, m, deterministic)
}
func (m *Top) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Top.Merge(m, src)
}
func (m *Top) XXX_Size() int {
	return xxx_messageInfo_Top.Size(m)
}
func (m *Top) XXX_DiscardUnknown() {
	xxx_messageInfo_Top.DiscardUnknown(m)
}

var xxx_messageInfo_Top proto.InternalMessageInfo

func (m *Top) GetNested() []*Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func init() {
	proto.RegisterEnum("ipcbench.Nested_Type", Nested_Type_name, Nested_Type_value)
	proto.RegisterType((*Scalars)(nil), "ipcbench.Scalars")
	proto.RegisterType((*Nested)(nil), "ipcbench.Nested")
	proto.RegisterType((*Nested_SubType)(nil), "ipcbench.Nested.SubType")
	proto.RegisterType((*Top)(nil), "ipcbench.Top")
}

func init() { proto.RegisterFile("nested.proto", fileDescriptor_2a0036ddd0f0b972) }

var fileDescriptor_2a0036ddd0f0b972 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x6b, 0xbb, 0x30,
	0x18, 0xc7, 0x7f, 0x8f, 0xfa, 0xd3, 0xfa, 0xf4, 0x0f, 0x6d, 0x60, 0x10, 0x76, 0x12, 0x4f, 0x19,
	0x03, 0x07, 0xee, 0xb0, 0x73, 0x0f, 0x42, 0x77, 0x58, 0x3b, 0xa2, 0x97, 0x9d, 0x8a, 0xd1, 0xc0,
	0x84, 0x4d, 0x43, 0x63, 0x0f, 0x7d, 0x17, 0x7b, 0xc9, 0xc3, 0x44, 0xb7, 0xb1, 0xdd, 0xf2, 0x4d,
	0x9e, 0x7c, 0x3e, 0x5f, 0x12, 0x5c, 0xb4, 0x52, 0xf7, 0xb2, 0x4e, 0xd4, 0xa9, 0xeb, 0x3b, 0x32,
	0x6b, 0x54, 0x25, 0x64, 0x5b, 0xbd, 0xc6, 0x5b, 0x0c, 0xf2, 0xaa, 0x7c, 0x2b, 0x4f, 0x9a, 0x2c,
	0x10, 0x6a, 0x0a, 0x11, 0x30, 0xe0, 0x50, 0x0f, 0xa9, 0xa1, 0x4e, 0x04, 0xcc, 0xe5, 0xd0, 0x0c,
	0x49, 0x50, 0x37, 0x02, 0x36, 0xe3, 0x20, 0x86, 0xa4, 0xa9, 0x17, 0x01, 0x0b, 0x39, 0xe8, 0xf8,
	0xc3, 0x41, 0x7f, 0x6f, 0xe8, 0x64, 0x85, 0x4e, 0x63, 0x19, 0xff, 0xb9, 0xd3, 0xd4, 0x84, 0xa0,
	0xd7, 0x96, 0xef, 0xd2, 0x70, 0x42, 0x6e, 0xd6, 0x24, 0xc5, 0x40, 0x9f, 0x45, 0x7f, 0x51, 0xd2,
	0x00, 0xe7, 0x29, 0x4d, 0xa6, 0x36, 0x89, 0xc5, 0x24, 0xf9, 0x59, 0x14, 0x17, 0x25, 0xf9, 0x34,
	0x48, 0x6e, 0x31, 0xd0, 0xb6, 0x25, 0xf5, 0x22, 0x97, 0xcd, 0xd3, 0xcd, 0xf7, 0x9d, 0xb1, 0x3e,
	0x9f, 0x26, 0xae, 0x77, 0x18, 0x8c, 0x80, 0x2f, 0x3f, 0xfc, 0xf0, 0xdf, 0xa0, 0x67, 0xe4, 0x43,
	0xa7, 0x55, 0x7a, 0xf5, 0x47, 0x6e, 0xcc, 0x66, 0x24, 0x7e, 0x40, 0xcf, 0x60, 0x96, 0x18, 0x16,
	0xbb, 0xc7, 0xfc, 0x58, 0xbc, 0x3c, 0x67, 0xeb, 0x7f, 0x36, 0x6e, 0x0b, 0x1b, 0x81, 0x6c, 0x70,
	0x79, 0xd8, 0x67, 0xc7, 0xa7, 0x03, 0xcf, 0xec, 0x96, 0x1b, 0xdf, 0xa1, 0x5b, 0x74, 0x8a, 0x30,
	0xf4, 0xed, 0xb3, 0x53, 0x30, 0xad, 0xd7, 0xbf, 0x65, 0x7c, 0x3c, 0x17, 0xbe, 0xf9, 0x97, 0xfb,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xa1, 0x07, 0xad, 0xa7, 0x01, 0x00, 0x00,
}
